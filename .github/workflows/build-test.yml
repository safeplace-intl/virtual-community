name: Build and test CI
run-name: ${{ github.actor }} Build and test CI

on:
  push:
    branches: ["main", "staging", "add-image-service"]
  pull_request:
    branches: ["main", "staging"]

jobs:
  # Label of the container job
  container-job:
    # Containers must run in Linux based operating systems
    runs-on: ubuntu-latest
    # Docker Hub image that `container-job` executes in
    container: node:10.18-jessie

    # Service containers to run with `container-job`
    services:
      # Label used to access the service container
      postgres:
        # Docker Hub image
        image: postgres
        # Provide the password for postgres
        env:
          POSTGRES_PASSWORD: postgres
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - name: Check out repository code
      - uses: actions/checkout@v3

      - name: Install dependencies
        run: npm ci
      - name: Install client side dependencies
        run: cd src/client && npm ci
      - run: cd .. & cd ..

      - name: Connect to PostgreSQL
        # Runs a script that creates a PostgreSQL table, populates
        # the table with data, and then retrieves the data.
        run: npm run migrate:prisma
        # Environment variables used by the `client.js` script to create a new PostgreSQL table.
        env:
          # The hostname used to communicate with the PostgreSQL service container
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432
          POSTGRES_HOST: postgres
          # The default PostgreSQL port
          POSTGRES_PORT: 5432
      
#       - name: Database migrations
#         run: npm run migrate:prisma
          
          
#   build:
#     runs-on: ubuntu-latest
  
#     env:
#       DATABASE_URL: "postgres://postgres:postgres@localhost:5432/test"
#       JWT_SECRET: "s#cret"
    
#     strategy:
#       matrix:
#         node-version: [18.x]
      
#     steps:
#       - uses: actions/checkout@v3
#       - name: Use Node.js ${{ matrix.node-version }}
#         uses: actions/setup-node@v3
#         with:
#           node-version: ${{ matrix.node-version }}
#           cache: "npm"
#       - name: Install server side dependencies
#         run: npm ci
#       - run: npm install docker-compose
#       - name: Install client side dependencies
#         run: cd src/client && npm ci
#       - run: cd .. & cd ..
#       - name: Start test database
#         run: docker compose -f .devcontainer/docker-compose.yml up -d test-db
#         env:
#           POSTGRES_USER: postgres
#           POSTGRES_PASSWORD: postgres
#           POSTGRES_DB: test
#           PGHOST: localhost
#           PGPORT: 5432
#       - name: Run database migrations
#         run: npm run migrate:prisma
#       - name: Run build if present
#         run: npm run build --if-present
#       - name: Run tests if present
#         run: npm run test --if-present
#       - name: Stop test database
#         run: docker compose down
        



